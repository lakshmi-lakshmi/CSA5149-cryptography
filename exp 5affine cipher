def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def affine_encrypt(text, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, encryption is not possible.")
    
    result = ""
    for char in text:
        if char.isalpha():
            p = ord(char.upper()) - ord('A')
            c = (a * p + b) % 26
            result += chr(c + ord('A'))
        else:
            result += char
    return result

def affine_decrypt(cipher, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, decryption is not possible.")
    
    result = ""
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("Multiplicative inverse for a does not exist, decryption is not possible.")
    
    for char in cipher:
        if char.isalpha():
            c = ord(char.upper()) - ord('A')
            p = (a_inv * (c - b)) % 26
            result += chr(p + ord('A'))
        else:
            result += char
    return result

# Example usage
plaintext = "HELLO"
a = 5
b = 8

ciphertext = affine_encrypt(plaintext, a, b)
print(f"Encrypted: {ciphertext}")

decrypted_text = affine_decrypt(ciphertext, a, b)
print(f"Decrypted: {decrypted_text}")
