def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def affine_encrypt(text, a, b):
    # Ensure a and m are coprime
    m = 26
    if gcd(a, m) != 1:
        raise ValueError("a and 26 are not coprime, choose a different 'a'")
    
    result = ""
    for char in text:
        if char.isalpha():
            x = ord(char.upper()) - ord('A')
            encrypted_char = (a * x + b) % m
            result += chr(encrypted_char + ord('A'))
        else:
            result += char  # Non-alphabet characters are not encrypted
    return result

def affine_decrypt(cipher, a, b):
    # Ensure a and m are coprime
    m = 26
    if gcd(a, m) != 1:
        raise ValueError("a and 26 are not coprime, choose a different 'a'")
    
    result = ""
    a_inv = mod_inverse(a, m)
    if a_inv is None:
        raise ValueError("Modular inverse does not exist for the given 'a'")
    
    for char in cipher:
        if char.isalpha():
            y = ord(char.upper()) - ord('A')
            decrypted_char = (a_inv * (y - b)) % m
            result += chr(decrypted_char + ord('A'))
        else:
            result += char  # Non-alphabet characters are not decrypted
    return result

# Example usage
text = "HELLO WORLD"
a = 5
b = 8

encrypted_text = affine_encrypt(text, a, b)
decrypted_text = affine_decrypt(encrypted_text, a, b)

print("Original Text:", text)
print("Encrypted Text:", encrypted_text)
print("Decrypted Text:", decrypted_text)
