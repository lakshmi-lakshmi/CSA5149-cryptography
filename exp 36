def gcd(a, b):
  """Calculates the greatest common divisor of a and b"""
  while b != 0:
    a, b = b, a % b
  return a

def encrypt(plaintext, a, b):
  """Encrypts the plaintext using the affine cipher"""
  ciphertext = ""
  for char in plaintext:
    if char.isalpha():
      offset = ord('a') if char.islower() else ord('A')
      ciphertext += chr(((a * (ord(char) - offset) + b) % 26) + offset)
    else:
      ciphertext += char
  return ciphertext

def decrypt(ciphertext, a, b):
  """Decrypts the ciphertext using the affine cipher"""
  plaintext = ""
  a_inv = None
  for i in range(26):
    if (a * i) % 26 == 1:
      a_inv = i
      break
  if a_inv is None:
    raise ValueError("a must be coprime with 26")
  for char in ciphertext:
    if char.isalpha():
      offset = ord('a') if char.islower() else ord('A')
      plaintext += chr(((a_inv * (ord(char) - offset - b)) % 26) + offset)
    else:
      plaintext += char
  return plaintext

if __name__ == "__main__":
  plaintext = input("Enter plaintext: ")
  a = int(input("Enter a: "))
  b = int(input("Enter b: "))

  if gcd(a, 26) != 1:
    print("Error: a must be coprime with 26")
  else:
    ciphertext = encrypt(plaintext, a, b)
    print("Ciphertext:", ciphertext)

    decrypted_text = decrypt(ciphertext, a, b)
    print("Decrypted text:", decrypted_text)
