def permute(bits, permutation):
    return [bits[i] for i in permutation]

def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def sbox(bits, sbox_table):
    # bits should be of length 4
    if len(bits) != 4:
        raise ValueError("S-box input must be 4 bits")
    
    row = (bits[0] << 1) | bits[3]
    col = (bits[1] << 1) | bits[2]
    return [int(b) for b in f"{sbox_table[row][col]:02b}"]

def f_function(right_half, subkey):
    # Expansion permutation
    expansion_permutation = [3, 0, 1, 2, 1, 2, 3, 0]
    expanded_half = permute(right_half, expansion_permutation)
    
    # XOR with subkey
    xor_result = xor(expanded_half, subkey)
    
    # S-Boxes
    sbox0 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]]
    sbox1 = [[0, 1, 2, 3], [2, 0, 1, 3], [1, 2, 3, 0], [0, 2, 1, 3]]
    left_half = xor_result[:4]
    right_half = xor_result[4:]
    
    left_half = sbox(left_half, sbox0)
    right_half = sbox(right_half, sbox1)
    
    # Combine S-Box outputs
    combined = left_half + right_half
    
    # P4 permutation
    p4_permutation = [1, 3, 2, 0]
    return permute(combined, p4_permutation)

def sd_encrypt(plaintext, key):
    # Key permutation
    key_permutation = [2, 0, 3, 1, 6, 4, 7, 5]
    key = permute(key, key_permutation)
    
    # Split key
    k1 = left_shift(key[:5], 1) + left_shift(key[5:], 1)
    k2 = left_shift(k1[:5], 2) + left_shift(k1[5:], 2)
    
    # Initial permutation
    ip = [1, 5, 2, 0, 3, 7, 4, 6]
    ip_bits = permute(plaintext, ip)
    left_half = ip_bits[:4]
    right_half = ip_bits[4:]
    
    # Round 1
    f1 = f_function(right_half, k1)
    left_half = xor(left_half, f1)
    left_half, right_half = right_half, left_half
    
    # Round 2
    f2 = f_function(right_half, k2)
    left_half = xor(left_half, f2)
    
    # Final permutation
    fp = [3, 0, 2, 4, 6, 1, 7, 5]
    final_bits = permute(left_half + right_half, fp)
    
    return final_bits

# Example usage
plaintext = [1, 0, 1, 0, 1, 0, 1, 0]  # Example plaintext
key = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # Example key

ciphertext = sd_encrypt(plaintext, key)
print("Ciphertext:", ciphertext)
