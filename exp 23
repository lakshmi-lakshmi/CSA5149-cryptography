import numpy as np

# S-DES key generation
def permute(bits, permutation):
    return [bits[i] for i in permutation]

def shift_left(bits, shifts):
    return bits[shifts:] + bits[:shifts]

def generate_keys(key):
    p10 = [2, 4, 1, 6, 3, 9, 0, 8, 7, 5]
    p8 = [5, 2, 6, 3, 7, 4, 9, 8]
    key = permute(key, p10)
    left, right = key[:5], key[5:]
    left = shift_left(left, 1)
    right = shift_left(right, 1)
    k1 = permute(left + right, p8)
    left = shift_left(left, 2)
    right = shift_left(right, 2)
    k2 = permute(left + right, p8)
    return k1, k2

# S-DES IP and IP-1
ip = [1, 5, 2, 0, 3, 7, 4, 6]
ip_inv = [3, 0, 2, 4, 6, 1, 7, 5]

def f_function(bits, key):
    ep = [3, 0, 1, 2, 1, 2, 3, 0]
    s0 = [
        [1, 0, 3, 2],
        [3, 2, 1, 0],
        [0, 2, 1, 3],
        [3, 1, 3, 2]
    ]
    s1 = [
        [0, 1, 2, 3],
        [2, 0, 1, 3],
        [3, 0, 1, 0],
        [2, 1, 0, 3]
    ]
    p4 = [1, 3, 2, 0]

    expanded = permute(bits[4:] + bits[:4], ep)
    xor = [expanded[i] ^ key[i] for i in range(8)]
    
    row1, col1 = xor[0]*2 + xor[3], xor[1]*2 + xor[2]
    row2, col2 = xor[4]*2 + xor[7], xor[5]*2 + xor[6]
    
    sbox_output = np.binary_repr(s0[row1][col1], width=2) + np.binary_repr(s1[row2][col2], width=2)
    p4_output = permute([int(bit) for bit in sbox_output], p4)
    return p4_output

def fk(bits, key):
    left, right = bits[:4], bits[4:]
    f_output = f_function(bits, key)
    xor_output = [left[i] ^ f_output[i] for i in range(4)]
    return xor_output + right

def sdes_encrypt(plaintext, key):
    k1, k2 = generate_keys(key)
    permuted_bits = permute(plaintext, ip)
    after_fk1 = fk(permuted_bits, k1)
    after_sw = after_fk1[4:] + after_fk1[:4]
    after_fk2 = fk(after_sw, k2)
    ciphertext = permute(after_fk2, ip_inv)
    return ciphertext

def sdes_decrypt(ciphertext, key):
    k1, k2 = generate_keys(key)
    permuted_bits = permute(ciphertext, ip)
    after_fk2 = fk(permuted_bits, k2)
    after_sw = after_fk2[4:] + after_fk2[:4]
    after_fk1 = fk(after_sw, k1)
    plaintext = permute(after_fk1, ip_inv)
    return plaintext

# CTR mode encryption and decryption
def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def int_to_bits(n, width):
    return [int(x) for x in np.binary_repr(n, width=width)]

def ctr_encrypt(plaintext, key, counter):
    block_size = 8
    ciphertext = []
    for i in range(0, len(plaintext), block_size):
        block = plaintext[i:i+block_size]
        counter_bits = int_to_bits(counter, block_size)
        encrypted_counter = sdes_encrypt(counter_bits, key)
        encrypted_block = xor(block, encrypted_counter)
        ciphertext.extend(encrypted_block)
        counter += 1
    return ciphertext

def ctr_decrypt(ciphertext, key, counter):
    # In CTR mode, encryption and decryption are symmetric
    return ctr_encrypt(ciphertext, key, counter)

# Test data
counter = 0
plaintext = [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0]
key = [0, 1, 1, 1, 1, 1, 1, 1, 0, 1]

ciphertext = ctr_encrypt(plaintext, key, counter)
decrypted_plaintext = ctr_decrypt(ciphertext, key, counter)

# Convert binary lists to strings for display
def bits_to_string(bits):
    return ''.join(map(str, bits))

print(f"Original plaintext: {bits_to_string(plaintext)}")
print(f"Ciphertext: {bits_to_string(ciphertext)}")
print(f"Decrypted plaintext: {bits_to_string(decrypted_plaintext)}")
