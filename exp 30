from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import os

def xor_bytes(a, b):
    return bytes(x ^ y for x, y in zip(a, b))

def cbc_mac(key, message, block_size=16):
    # Initialize IV to zero
    iv = bytes(block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    padded_message = pad(message, block_size)
    encrypted_message = cipher.encrypt(padded_message)
    mac = encrypted_message[-block_size:]  # Last block is the MAC
    return mac

def main():
    key = os.urandom(16)  # Generate a random 16-byte key
    block_size = 16       # AES block size
    
    # One-block message X
    X = b'This is a test!'  # 16 bytes (one block)

    # Compute MAC for one-block message X
    T = cbc_mac(key, X)
    print(f'MAC for one-block message X: {T.hex()}')

    # Construct the two-block message X || (X ⊕ T)
    X_xor_T = xor_bytes(X, T)
    two_block_message = X + X_xor_T

    # Compute MAC for the two-block message
    T_two_blocks = cbc_mac(key, two_block_message)
    print(f'MAC for two-block message X || (X ⊕ T): {T_two_blocks.hex()}')

if __name__ == "__main__":
    main()
