from Crypto.Cipher import DES3
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import binascii

def cbc_3des_encrypt(plaintext, key, iv):
    cipher = DES3.new(key, DES3.MODE_CBC, iv)
    padded_text = pad(plaintext.encode('utf-8'), DES3.block_size)
    encrypted_text = cipher.encrypt(padded_text)
    return binascii.hexlify(iv + encrypted_text).decode('utf-8')

def cbc_3des_decrypt(ciphertext, key):
    ciphertext_bytes = binascii.unhexlify(ciphertext)
    iv = ciphertext_bytes[:DES3.block_size]
    encrypted_text = ciphertext_bytes[DES3.block_size:]
    cipher = DES3.new(key, DES3.MODE_CBC, iv)
    decrypted_text = unpad(cipher.decrypt(encrypted_text), DES3.block_size)
    return decrypted_text.decode('utf-8')

if __name__ == "__main__":
    key = get_random_bytes(24)  # 3DES key size: 24 bytes
    iv = get_random_bytes(8)    # DES block size: 8 bytes
    plaintext = "Hello, World!"

    encrypted_text = cbc_3des_encrypt(plaintext, key, iv)
    print("Encrypted Text:", encrypted_text)

    decrypted_text = cbc_3des_decrypt(encrypted_text, key)
    print("Decrypted Text:", decrypted_text)
